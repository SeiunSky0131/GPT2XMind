KD-tree is a popular data structure used in computer science for efficient searching of high-dimensional data. In general, KD-trees are efficient when the following conditions are met:

1. High-dimensional data: KD-trees are most efficient when searching high-dimensional data. Traditional search algorithms can suffer from the "curse of dimensionality" which means that the search time grows exponentially with the number of dimensions. KD-trees provide a more efficient way to search high-dimensional data because they divide the space recursively into smaller regions.

2. Static data: KD-trees are best suited for static data. In other words, the data should not change frequently. Building a KD-tree is an expensive operation and updating the tree can be time-consuming. If the data is updated frequently, then a KD-tree may not be the best choice.

3. Balanced data: KD-trees work best when the data is evenly distributed across the dimension. If the data is clustered in certain regions, then the search time can be significantly impacted.

4. Approximate nearest neighbor search: KD-trees provide quick access to approximate nearest neighbors. If you only need to find the closest data point within a certain distance, then KD-trees are a good choice. However, if you need to find the exact nearest neighbor, then other algorithms may be more suitable.